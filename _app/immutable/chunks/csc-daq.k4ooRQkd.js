import{s as u,n as o}from"./scheduler.46lvm-Bv.js";import{S as f,i as g,g as d,s as v,h,A as m,c as y,a as r,f as n}from"./index.1X4n-btJ.js";function w(p){let e,l="This project is a carrythrough from my earliest days on Baja to the present day. This library is designed to run on an ESP32 and make gathering lots of data at relatively high rates (~200hz) easy on the programmer as part of the CSC’s <em>Operator Aid System</em> project. This project is intended to gather data from BugVacs (pictured above) to help identify and fix farm inefficiencies.",s,a,c="For this project, I developed a fully custom file format to log timeseries data with <strong>zero</strong> overhead (outside of a header, of course). This results in very small file sizes, especially compared with CSV or JSON, which allows the ESP32 to handle data writing to SD even with its limited resources. It also allows huge datasets to be loaded into a browser webpage for viewing without going over the browser’s ~2GB/page RAM limit. It’s still very much under active development.";return{c(){e=d("p"),e.innerHTML=l,s=v(),a=d("p"),a.innerHTML=c},l(t){e=h(t,"P",{"data-svelte-h":!0}),m(e)!=="svelte-x3vubk"&&(e.innerHTML=l),s=y(t),a=h(t,"P",{"data-svelte-h":!0}),m(a)!=="svelte-1o5u8js"&&(a.innerHTML=c)},m(t,i){r(t,e,i),r(t,s,i),r(t,a,i)},p:o,i:o,o,d(t){t&&(n(e),n(s),n(a))}}}const S={title:"Data Acquisition Library",date:"2024-06-01",github:"https://github.com/DominicChm/daq-2023",categories:["csc","c++","software","arduino"],cover:"/portfolio/assets/csc-daq/bugvac.png",excerpt:"A simple, high performance DAQ solution for Arduino"};class x extends f{constructor(e){super(),g(this,e,null,w,u,{})}}export{x as default,S as metadata};
